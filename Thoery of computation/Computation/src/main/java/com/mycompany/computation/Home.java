/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Hussnain
 */
package com.mycompany.computation;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTextArea;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;


public class Home extends javax.swing.JFrame {
   private FiniteAutomaton fa;
   private RegularGrammar rg;
   private Map<String, Set<String>> productionRules;
    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnRG = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        OutputRGV = new javax.swing.JScrollPane();
        InputFAV = new javax.swing.JScrollPane();
        InputFA = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        InputSTRING = new javax.swing.JScrollPane();
        InputString = new javax.swing.JTextArea();
        btnCheck = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        btnImport = new javax.swing.JButton();
        btnClearCNF = new javax.swing.JButton();
        btnCheckCYK = new javax.swing.JButton();
        OutputCYK = new javax.swing.JScrollPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        InputCNF = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setFocusable(false);
        jTabbedPane1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("TIC 2151 Theory of Computation");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Group No. 15");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("Group Member, Name, Photo and ID");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText(" Other Info such as member participation");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("DYLAN YET = 25%");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("LIM WEI THONG  = 25%");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("ALBERT LEONARDO WILLIM = 25%");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("PIRAGASH MARAN = 25%");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 249, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(260, 260, 260))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(415, 415, 415)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(52, 52, 52))
        );

        jTabbedPane1.addTab("Home", jPanel2);

        btnNew.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 51, 51));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnRG.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnRG.setText("RG");
        btnRG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRGActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Regular Grammer (Output)");

        InputFA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "State", "0", "1", "ε"
            }
        ));
        InputFAV.setViewportView(InputFA);

        jLabel10.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("FA (Input)");

        jLabel11.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Check String (Input)");

        InputString.setColumns(20);
        InputString.setRows(5);
        InputSTRING.setViewportView(InputString);

        btnCheck.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnCheck.setText("Check");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRG, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addComponent(InputFAV, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OutputRGV, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(InputSTRING, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(53, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(281, 281, 281))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRG, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(InputFAV, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(OutputRGV, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addComponent(InputSTRING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("FA to GR", jPanel3);

        btnImport.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnImport.setForeground(new java.awt.Color(255, 51, 51));
        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnClearCNF.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnClearCNF.setForeground(new java.awt.Color(255, 51, 51));
        btnClearCNF.setText("Clear");
        btnClearCNF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearCNFActionPerformed(evt);
            }
        });

        btnCheckCYK.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        btnCheckCYK.setText("Check");
        btnCheckCYK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckCYKActionPerformed(evt);
            }
        });

        InputCNF.setColumns(20);
        InputCNF.setRows(5);
        jScrollPane8.setViewportView(InputCNF);

        jLabel12.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("CNF Grammer (Input)");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 408, Short.MAX_VALUE)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(281, 281, 281))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnClearCNF, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckCYK, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(OutputCYK)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnClearCNF, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCheckCYK, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addComponent(OutputCYK, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 930, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("CYK", jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 930, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Help", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Home");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
      btnNew.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Step 1: Convert FA into Regular Grammar
//    String faDefinition = InputFA.getText();
//    RegularGrammar regularGrammar = convertFAToRegularGrammar(faDefinition);
//
//    // Step 3: Generate output of RG in OutputRGV
//    String rgOutput = regularGrammar.toString(); // Assuming RegularGrammar has a toString() method
//    OutputRGV.setText(rgOutput);
    // Sample FA transition table
    String[][] faTable = {
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""}      
    };

    String[] columnNames = {"State", "0", "1", "ε"};

    DefaultTableModel tableModel = new DefaultTableModel(faTable, columnNames);
    InputFA.setModel(tableModel);
            }
        });
        
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        btnClear.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Step 1: Convert FA into Regular Grammar
//    String faDefinition = InputFA.getText();
//    RegularGrammar regularGrammar = convertFAToRegularGrammar(faDefinition);
//
//    // Step 3: Generate output of RG in OutputRGV
//    String rgOutput = regularGrammar.toString(); // Assuming RegularGrammar has a toString() method
//    OutputRGV.setText(rgOutput);
    // Sample FA transition table
    String[][] faTable = {
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""},
        {"","",""}      
    };

    String[] columnNames = {"State", "0", "1", "ε"};

    DefaultTableModel tableModel = new DefaultTableModel(faTable, columnNames);
    InputFA.setModel(tableModel);
            }
        });
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnRGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRGActionPerformed
             btnRG.addActionListener(new ActionListener() {
                 private RegularGrammar rg1;
            @Override
        public void actionPerformed(ActionEvent e) {
        String[][] faTable1 = {
            {"q0", "q1", "q2"},
            {"q1", "q1", "q2"},
            {"q2", "q2", "q2"}
        };

        Set<Character> terminals = new HashSet<>();
        terminals.add('0');
        terminals.add('1');
        terminals.add('ε');

        Set<String> nonTerminals = new HashSet<>();
        nonTerminals.add("S");
        // Add other non-terminals if required

        String startSymbol = "S";

        this.rg1 = new RegularGrammar(terminals, nonTerminals, startSymbol); // Initialize this.rg
        
        this.rg1.addProductionRule("S", "0S");
        this.rg1.addProductionRule("S", "1S");

        FiniteAutomaton fa = parseFA(InputFA);  // parse FA from the table
        RegularGrammar rg1 = convertFAToRG(fa);  // convert FA to RG

        this.rg1.addNonTerminal("S"); // Add non-terminals from FA manually if not already added

        OutputRGV.setViewportView(new JTextArea(this.rg1.toString())); // use setViewportView() to display RG in JScrollPane
    }//GEN-LAST:event_btnRGActionPerformed
          });
                 }
    private void btnClearCNFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearCNFActionPerformed
    btnClearCNF.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        InputCNF.setText(""); // Clear the CNF grammar input
    }
    });
    }//GEN-LAST:event_btnClearCNFActionPerformed

    private void btnCheckCYKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckCYKActionPerformed
    btnCheckCYK.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        String inputCNF = InputCNF.getText();
        
        // Process input and convert it into Map<String, List<String>>
        Map<String, List<String>> grammar = processInput(inputCNF);

        CYKParser parser = new CYKParser(grammar);
        String[][] parseResult = parser.parse(inputCNF);
        
        // Convert parseResult into String format and display in OutputCYK
        OutputCYK.setViewportView(createTable(parseResult));
    }
});

    }//GEN-LAST:event_btnCheckCYKActionPerformed

    
    
private Map<String, List<String>> processInput(String inputCNF) {
    Map<String, List<String>> grammar = new HashMap<>();

    String[] lines = inputCNF.split("\n");
    for (String line : lines) {
        String[] parts = line.split(" -> ");
        if(parts.length < 2) {
            System.out.println("Invalid line format: " + line);
            continue;
        }
        String lhs = parts[0].trim();
        String[] rhs = parts[1].trim().split("\\|");

        List<String> productions = grammar.getOrDefault(lhs, new ArrayList<>());
        productions.addAll(Arrays.asList(rhs));
        grammar.put(lhs, productions);
    }

    return grammar;
}

private JTable createTable(String[][] data) {
    String[] columnNames = new String[data.length];
    for (int i = 0; i < data.length; i++) {
        columnNames[i] = String.valueOf(i + 1);
    }
    JTable table = new JTable(data, columnNames);
    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

    // Adjust column widths to fit the content
    TableColumnModel columnModel = table.getColumnModel();
    for (int column = 0; column < table.getColumnCount(); column++) {
        TableColumn tableColumn = columnModel.getColumn(column);
        int preferredWidth = 100; // Adjust this value as needed
        tableColumn.setPreferredWidth(preferredWidth);
    }

    return table;
}

    
    private String getCYKChartAsString(String[][] table) {
StringBuilder sb = new StringBuilder();
    
    int n = table.length;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - i; j++) {
            if(j + i < table[j].length){
                sb.append(table[j][j + i]).append("\t");
            } else {
                sb.append("N/A").append("\t"); // Or some default value
            }
        }
        sb.append("\n");
    }
    
    return sb.toString();
}

    
    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
            btnCheck.addActionListener(e -> {    
         String[][] faTable = new String[10][4]; // Assuming the table has 10 rows and 4 columns
         for (int i = 0; i < faTable.length; i++) {
         for (int j = 0; j < faTable[i].length; j++) {
        faTable[i][j] = (String) InputFA.getValueAt(i, j);
    }
}

// Extract the values from the table
        Set<Character> terminals = new HashSet<>();
        Set<String> nonTerminals = new HashSet<>();
        String startSymbol = "";

// Assuming the terminals are in column 1, non-terminals in column 2, and start symbol in column 3
for (int i = 0; i < faTable.length; i++) {
    String terminal = faTable[i][1];
    String nonTerminal = faTable[i][2];
    String symbol = faTable[i][3];

    if (terminal != null && !terminal.isEmpty()) {
        terminals.add(terminal.charAt(0));
    }
    if (nonTerminal != null && !nonTerminal.isEmpty()) {
        nonTerminals.add(nonTerminal);
    }
    if (symbol != null && !symbol.isEmpty()) {
        startSymbol = symbol;
    }
}

// Create an instance of RegularGrammar using the extracted values
         RegularGrammar regularGrammar = new RegularGrammar(terminals, nonTerminals, startSymbol);
    String inputStrings = InputString.getText();
    String[] strings = inputStrings.split("\\n");
    StringBuilder output = new StringBuilder();
    for (String string : strings) {
        boolean isAccepted = regularGrammar.isAccepted(string); 
        // Assuming RegularGrammar has an isAccepted() method
        String result = isAccepted ? "Accepted" : "Rejected";
        output.append("String: ").append(string).append(" - ").append(result).append("\n");
    }

    JOptionPane.showMessageDialog(this, output.toString(), "String Testing Results", JOptionPane.INFORMATION_MESSAGE);
            
        });
    }//GEN-LAST:event_btnCheckActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
     btnImport.addActionListener((var e) -> {
         JFileChooser fileChooser = new JFileChooser();
         int choice = fileChooser.showOpenDialog(null);
         if (choice == JFileChooser.APPROVE_OPTION) {
             File file = fileChooser.getSelectedFile();
             String filePath = file.getAbsolutePath();
             readFile(filePath);
         }
     });

    }//GEN-LAST:event_btnImportActionPerformed

    
       private void readFile(String filePath) {
          try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                // Append each line to the StringBuilder
                sb.append(line).append(System.lineSeparator());
            }
            // Set the text in the JTextArea
            InputCNF.setText(sb.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
         }
private FiniteAutomaton parseFA(javax.swing.JTable table) {
    FiniteAutomaton fa = new FiniteAutomaton();

    for (int i = 0; i < table.getRowCount(); i++) {
        String startState = (String) table.getValueAt(i, 0);
        String inputSymbol = (String) table.getValueAt(i, 1);
        String endState = (String) table.getValueAt(i, 2);

        if (startState != null && !startState.isEmpty()) {
            fa.addState(startState);
        }

        if (inputSymbol != null && !inputSymbol.isEmpty()) {
            fa.addAlphabetSymbol(inputSymbol.charAt(0));
        }

        if (endState != null && !endState.isEmpty()) {
            fa.addState(endState);
        }

        if (startState != null && endState != null && inputSymbol != null &&
                !startState.isEmpty() && !endState.isEmpty() && !inputSymbol.isEmpty()) {
            fa.addTransition(startState, inputSymbol.charAt(0), endState);
        }
    }
    return fa;
}

    private RegularGrammar convertFAToRG(FiniteAutomaton fa) {

    Set<String> states = fa.getStates();
    Set<Character> alphabet = fa.getAlphabet();
    RegularGrammar rg = new RegularGrammar();
    // Each state in the FA becomes a non-terminal in the RG.
    for (String state : states) {
        rg.addNonTerminal(state);
    }

    // For each transition in the FA from state A to state B with symbol 'a',
    // you create a production rule in the RG where A -> aB.
    for (String fromState : states) {
        for (char symbol : alphabet) {
            Set<String> toStates = fa.getTransition(fromState, symbol);
            for (String toState : toStates) {
                rg.addProductionRule(fromState, symbol + toState);
            }
        }
    }

    // For each final state F in the FA, you add a production rule F -> ε in the RG.
    for (String finalState : fa.getFinalStates()) {
        rg.addProductionRule(finalState, "ε");
    }

    return rg;
}


    private RegularGrammar parseRG(String rgInput) {
    RegularGrammar rg = new RegularGrammar();
    // Split the input into lines, each representing a production rule
    String[] lines = rgInput.split("\n");
    
    // Process each production rule
    for (String line : lines) {
        // Split the line into left-hand side (non-terminal) and right-hand side (production)
        String[] parts = line.split("->");
        String nonTerminal = parts[0].trim();
        String production = parts[1].trim();

        // Add the production rule to the RG
        rg.addProductionRule(nonTerminal, production);
    }

    return rg;
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea InputCNF;
    private javax.swing.JTable InputFA;
    private javax.swing.JScrollPane InputFAV;
    private javax.swing.JScrollPane InputSTRING;
    private javax.swing.JTextArea InputString;
    private javax.swing.JScrollPane OutputCYK;
    private javax.swing.JScrollPane OutputRGV;
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnCheckCYK;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearCNF;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRG;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
